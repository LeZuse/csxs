<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	frameRate="30"
	backgroundColor="#DFDFDF"
	historyManagementEnabled="false"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationComplete="onCreationComplete(event)">
	<mx:Script>
		<![CDATA[

			import com.adobe.csxs.core.CSXSInterface;
			import com.adobe.csxs.events.*;
			import com.adobe.csxs.types.*;
			import flash.utils.setTimeout;
			import mx.events.FlexEvent;

			// properties
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

			protected var csxs:CSXSInterface;

			// methods
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

			/**
			 * Reskins the application to match the host application UI.
			 *
			 * @param {object} skin
			 */
			protected function reskin(skin:AppSkinInfo):void {
				var background:RGBColor = skin.panelBackgroundColor.color as RGBColor;
				var background_hex:uint = (uint(background.red) << 16) | (uint(background.green) << 8) | uint(background.blue);
				setStyle('backgroundColor', background_hex);
				wrapper.setStyle('backgroundColor', background_hex);
			}

			// event handlers
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

			/**
			 * Invoked after the application has successfully been created.
			 *
			 * @param {object} event
			 */
			protected function onCreationComplete(event:FlexEvent):void {
				var result:SyncRequestResult;
				csxs = CSXSInterface.getInstance();

				// set proper initial background color
				result = csxs.getHostEnvironment();
				if (result.status === SyncRequestResult.COMPLETE && result.data) {
					var hostEnv:HostEnvironment = result.data as HostEnvironment;
					var hostSkin:AppSkinInfo    = hostEnv.appSkinInfo;
					if (hostSkin) reskin(hostSkin);
				}

				// the wrapper that loads in the extension is glitchy & occasionally won't
				// size the stage properly. triggering a resize fixes this.
				result = csxs.getWindowGeometry();
				if ((result.status === SyncRequestResult.COMPLETE) && result.data) {
					var windowSize:WindowGeometry = result.data as WindowGeometry;
					setTimeout(function():void {
						windowSize.height++;
						csxs.requestStateChange(StateChangeEvent.WINDOW_RESIZE, windowSize);
					}, 100);
					setTimeout(function():void {
						windowSize.height--;
						csxs.requestStateChange(StateChangeEvent.WINDOW_RESIZE, windowSize);
					}, 300);
				}

				// add csxs event listeners
				csxs.addEventListener(StateChangeEvent.WINDOW_CLOSE, onPanelClose);
				csxs.addEventListener(AppReskinEvent.APPLICATION_RESKIN, onAppReskin);
			}

			/**
			 * Invoked when host application UI colors change.
			 *
			 * @param {object} event
			 */
			protected function onAppReskin(event:AppReskinEvent):void {
				reskin(event.appSkinInfo);
			}

			/**
			 * Triggered right before the panel closes.
			 *
			 * @param {object} event
			 */
			protected function onPanelClose(event:StateChangeEvent):void { /* ... */ }

		]]>
	</mx:Script>
	<mx:Canvas x="0" y="0" width="100%" height="100%" id="wrapper" backgroundColor="#DFDFDF"></mx:Canvas>
</mx:Application>